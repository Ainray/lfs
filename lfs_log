# ------------------------------------------------------------
# Mon Mar 12 23:35:11 CST 2018
# 1 check host system and appropriate versions
# ------------------------------------------------------------
        $ bash version_check.sh

   make some problem clear by 

        $ bash version_check.sh |grep not
in my Linux debian 4.9.0-6-amd64 #1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02) x86_64 GNU/Linux
i get three lines: bison, yacc, /bin/sh. I install bison directly by

        $ sudo apt-get install bison

In fact, bison is yacc replacement, try man bison, so install bison,
yacc is installed also.

and, change target of link of /bin/sh by
        $ sudo unlink /bin/sh
        $ sudo ln -sv /bin/bash /bin/sh
Now check again, I found versions in my host are all satisfied.
# ------------------------------------------------------------

# ------------------------------------------------------------
# Tue Mar 13 14:18:55 CST 2018
# 2 create new partition
    I has no empty partition in my host. Fortunately, ext4 supports
resize now. So the first step will be shrinking my /home partition
as follows:
    Be careful, you must know what you are doing which maybe result in
unpredictive result. 

        resize home::
            $ su
            <passwd>
            # umount /dev/sdaN   # check by df -Th, umount /home 
            # fdisk /dev/sda
            (command m for help): p   # check /home disk partition and record the start
                                      # start head of it
            (command m for help): d   
            (command m for help): <home partition>
            (command m for help): n
            (command m for help): <start sector> # must keep same as before
            (command m for help): <end sector>   # to modified into approximate size
            (command m for help): 
            # e2fsck -f /dev/sdaN
            # resize2fs /dev/sdaN  <size>        # the size must be less then its physical
                                                 # size given by e2fsck
                                                 # if not, when reboot, you will cannot
                                                 # enter system as usually because of
                                                 # /home cannot mount automatically
                                                 # It is better keep the size here same
                                                 # as the physical size given by e2fsck.

            # mount /dev/sdaN                    # remount

    Now i should plan my LFS file system now, as recommended by LFS, 
            -----------------
            /           10G
            /boot       100M
            /swap       6G (1.5*RAM) 
            /home       12G
            /usr        6G
            /opt        5G
            /tmp        3G
            -----------------
            all        =42G
    Now create these partions in fdisk, take /root as example
            (command m for help): n
            (some prompt):<Enter>
            (some prompt):+10G

you can create others like this.
After partitions are created, OS maybe need reboot to make new partition available.
    
    Now make file system by
        # mkfs -v -t ext4 /dev/sda10      #sda10 is the partition is prepared for /root
in my case, this command should be applied to sda[10-11,13-16], sda12 is for 
swap.

make swap by        
        # mkswap /dev/sda12

# ------------------------------------------------------------
# Tue Mar 13 17:43:54 CST 2018
# 3 create environment
#
    create new user lfs, target root file system by 
        # lfs_adduser.sh

then login as new user lfs, create the comfortable working environment.
There is one suggest, you can copy your usual user bash configuration files
(usually including .bashrc and .bash_setting, .vimrc). More should talk about
.vim directory if you use vim as main editor. In some cases, you maybe have 
install a large number of plugins, and do not just want to copy it. There is 
a little trick, you can create a new group shared by your usual user and new 
lfs user, and rename .vim into .vimshare, and change its group into the new
group, and give whole permission to the group. At last, you create symlinks
for usual user and new lfs user. Now you do not change anything about vim 
configuration and your new lfs user and usual user can both use vim in 
the way as before. Used commands maybe follow as:

        $ group add vimshare
        $ usermod -a -G vimshare foo
        $ usermod -a -G vimshare lfs
        $ mv ~/.vim ~/.vimshare
        $ ln -sv ~/.vimshare ~/.vim
        $ chmod 770 -R ~/.vimshare

after login as new user, create new symlinks by 
        $ ln -sv /home/foo/.vimshare ~/.vim

Now, you can work as before, first create the new personal environment  using

        $ lfs_init.sh

# ------------------------------------------------------------
# Tue Mar 13 15:38:14 CST 2018
# 4 download sources

# check LFS has been set before you proceed
#

Get download list file wget-list , by

       $ wget www.linuxfromscratch.org/lfs/view/stable-systemd/wget-list

then download  all needed sources by

       $ wget --input-file=wget-list -c --directory-prefix=/mnt/lfs/sources

Add md5 correction, download md5sums file by,

       $ wget www.linuxfromscratch.org/lfs/view/stable-systemd/md5sums

check md5sum by
       $ pushd $(/mnt/lfs/sources)
       $ md5sum -c md5sum
       $ popd

    In this process, gnu download repository cannot work for me, i found
another repository for me, but it will works with a little different 
wget-list and md5sum files.
    I name these two files as wget-list-working and md5sum-working and 
gives them patachs wget-list.patch and md5sum.patch. If you want use 
mine, just apply these two patches by
       $ patch < wget-list.patch
       $ patch < md5sum.patch
then run commands above again. I think sources now are download successfully.

    Thanks to this site,
       http://git.savannah.nongnu.org/cgit/

It seems to provide all nongnu versions of gnu tools.

        
# ------------------------------------------------------------
# Tue Mar 13 20:55:32 CST 2018
# 5 install tool-chain 
 
#start install binutils
          $ lfs_binutils_install.sh

# install gcc
          $ lfs_gcc_install.sh

# install Linux API headers
          $ lfs_linuxheader_install.sh

# install glibc
          $ lfs_gcc_install
# test target toolchain
          $ lfs_test.sh
the output should be like,
      [Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]
after test, remove temporary file, 
          $ rm dummy.c
# install tools including binutils, gcc again and test again
          $ lfs_binutils_install_p2.sh
          $ lfs_gcc_install_p2.sh
          $ lfs_test_p2.sh
you should get the same output

# ------------------------------------------------------------
# Wed Mar 14 13:55:01 CST 2018
# 6 install test suite and additional tools
#
#----------------------------------------------------------------------
#    script                           tools               remark
#----------------------------------------------------------------------
 $ lfs_tcl_install.sh       tcl8.6.8-src.tar.gz           test
 $ lfs_expect_install.sh    expect5.45.4.tar.gz           test
 $ lfs_dejagnu_install.sh   dejagnu-1.6.1.tar.gz          test
 $ lfs_m4_install.sh        m4-1.4.18.tar.xz              marco
 $ lfs_ncurses_install.sh   ncurses-6.1.tar.gz            text terminal
 $ lfs_bash_install.sh      bash-4.4.18.tar.gz            shell
 $ lfs_bison_install.sh     bison-3.0.4.tar.xz            parser
 $ lfs_bzip2_install.sh     bzip2-1.0.6.tar.gz            compression
 $ lfs_coreutils_install.sh coreutils-8.29.tar.xz         core utilities
 $ lfs_diff_install.sh      diffutils-3.6.tar.xz          compare file/directory
 $ lfs_file_install.sh      file-5.32.tar.gz              file information
 $ lfs_find_install.sh      findutils-4.6.0.tar.gz        file name search
 $ lfs_gawk_install.sh      gawk-4.2.0.tar.xz             awk
 $ lfs_gettext_install.sh   gettext-0.19.8.1.tar.xz       i18n and local 
 $ lfs_grep_install.sh      grep-3.1.tar.xz               file search 
 $ lfs_gzip.sh              gzip-1.9.tar.xz               compression
 $ lfs_make_install.sh      make-4.2.1.tar.bz2            compile
 $ lfs_patch_install.sh     patch-2.7.6.tar.xz            patch 
 $ lfs_perl_install.sh      perl-5.26.1.tar.xz            perl
 $ lfs_sed_install.sh       sed-4.4.tar.xz                sed
 $ lfs_tar_install.sh       tar-1.30.tar.xz               tar archive
 $ lfs_textinfo_install.sh  texinfo-6.5.tar.xz            info 
 $ lfs_utillinux_install.sh util-linux-2.31.1.tar.xz      utilities
 $ lfs_xz_install.sh        xz-5.2.3.tar.xz               compression
#----------------------------------------------------------------------

# ------------------------------------------------------------
# Wed Mar 14 08:09:58 Asia 2018
# 7 change ownership, create basic file system
#
    Important, before change, double check LFS environment variable
is exported in root's environment.

        # echo $LFS
    
    Change ownership of $LFS/tools to root by
        # chown -R root:root $LFS/tools
        
    Now prepare virtual kernal file system, change root into target by
        # lfs_chroot.sh

and make basic target file system as well as enable login logging system after 
change into target.
        # lfs_mkfs.sh
        # lfs_mksymlink.sh
    
# ------------------------------------------------------------
# Wed Mar 14 20:33:59 Asia 2018
# 8  install native tools in target system 

    First install man pages and Linux headers by 

        # lfs_target_man_install.sh
        # lfs_target_linux_headers_install.sh
         
then install glibc
        # lfs_glibc_install.sh
When first install glibc, there occurs errors. Errors maybe says something like
    # configure:2643: error: in `/sources/glibc-2.27/build':
    # configure:2645: error: cannot compute suffix of object files: cannot compile
    # See `config.log' for more details
and when you type gcc, no such file or directory. And this error is also documented
in LFS-FAQ (no such file or directory).
    # The problem  is path problem, target system cannot detect native gcc,
so I recompile the gcc-7.3.0 in the 2nd phase again, after reinstall, type 
gcc -v, it gives right outputs. There is a little trick worth to say. As in 
step 7,  the ownership of $LFS/tools has been changed into root. But as LFS
say, compile the packages as lfs user, how to work around this problem. I
just first compile as usually by running
    # lfs_gcc_install_p2.sh
When run "make install", it should give errors. Do not worry. Just run "su"
to login as root, then run "make install" again.
    For me, it is not so soft. After gcc is reinstalled, there still errors
exits. But, looking into the config.log file, the similar problem for "as".
So I run "as" from bash, it also gives "No such file or directory" error. Woo,
the "binutils" must be reinstalled again too. As before, I reinstall "binutils"
in the 2nd phase. And again, first just run 
    # lfs_binutils_install_p2.sh
to compile it as usual, it ends and gives error while installing, login into 
"root" to "make install". This work should do twice for "binutils". Because,
it clean "ld" directory first, and should recompile as "lfs" user, and 
install as "root" by "cp -v ...", the last command in "lfs_binutils_install.sh 
file."
    Now, runing "lsf_target_glibc_install.sh" install and test gcc properly.
No errors. Congratulations.

    After glibc installed, some more configuration should be done by,

    # lfs_target_glibc_configure.sh
    #
then change the tool-chain linker and include path by
    # lfs_target_toolchain_adjust.sh

After tool chain has been adjuest, a short test can be run,
    # lfs_target_test_6.10.sh
and its output should like lfs_target_test_6.10_dummy.log
